@page "/Data/Product"

@using WebAppProject.Data
@using WebAppProject.Data.Models
@using WebAppProject.ViewModels.Product

@inject IProductDataService db

<h1>Product Page</h1>

<h4>Insert new Product</h4>
<EditForm Model="@newProduct" OnValidSubmit="@InsertProduct">
  <DataAnnotationsValidator/>
  <ValidationSummary/>

  <InputText id="name" @bind-Value="newProduct.Name"/>
  <InputNumber id="price" @bind-Value="newProduct.Price"/>

  <button type="submit" class="btn btn-primary">Add New Product </button>
</EditForm>
<h4>Current Products</h4>

@if(products is null)
{
    <p><em>Loading...</em></p>
}
else
{
    //Just to see if the products shows up
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Date Added</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.DateAdded</td>                   
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProductModel> products;
    private ProductDisplayModel newProduct = new ProductDisplayModel(); 

    protected override async Task OnInitializedAsync()
    {
        products = await this.db.GetProducts();
    }

    private async Task InsertProduct()
    {
        ProductModel product = new ProductModel
            {
                Name = newProduct.Name,
                Price = newProduct.Price,
                DateAdded = DateTime.UtcNow
            };
        await this.db.InsertProduct(product);

        products.Add(product);
       // products = await this.db.GetProducts(); 
        newProduct = new ProductDisplayModel();

    }
}
